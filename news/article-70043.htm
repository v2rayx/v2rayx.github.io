<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://v2rayx.github.io/news/article-70043.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- SEO Meta Tags -->
    <!-- OG Meta Tags to improve the way the post looks when you share the page on Facebook, Twitter, LinkedIn -->
    <meta property="og:site_name" content="" /> <!-- website name -->
    <meta property="og:site" content="" /> <!-- website link -->
    <meta property="og:title" content="" /> <!-- title shown in the actual shared post -->
    <meta property="og:description" content="" /> <!-- description shown in the actual shared post -->
    <meta property="og:image" content="" /> <!-- image link, make sure it's jpg -->
    <meta property="og:url" content="" /> <!-- where do you want your post to link to -->
    <meta name="twitter:card" content="summary_large_image"> <!-- to have large image post format in Twitter -->
    <title>vue &#8211; vue基础/vue核心内容_在线工具</title>
        <meta name="description" content="终于算是顺利进入vue了，确实也只有学了过后才知道，之前三过vue而不学，确实是对的，现在进来了一点都不后悔，ajax、node.js、promise、webpack、git等等确实是除了三大基础外还" />
        <link rel="icon" href="/assets/website/img/v2rayx/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="V2ray X节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://v2rayx.github.io/news/article-70043.htm" />
    <meta property="og:site_name" content="V2ray X节点订阅官网" />
    <meta property="og:title" content="vue &#8211; vue基础/vue核心内容_在线工具" />
    <meta property="og:image" content="https://v2rayx.github.io/uploads/20240905/39eeb338d00b13c3dea42723b57c0380.webp" />
        <meta property="og:release_date" content="2025-03-09T09:43:25" />
    <meta property="og:updated_time" content="2025-03-09T09:43:25" />
        <meta property="og:description" content="终于算是顺利进入vue了，确实也只有学了过后才知道，之前三过vue而不学，确实是对的，现在进来了一点都不后悔，ajax、node.js、promise、webpack、git等等确实是除了三大基础外还" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="vue &#8211; vue基础/vue核心内容_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/v2rayx/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayx/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayx/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayx/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SJTGCLQCTC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SJTGCLQCTC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Navigation -->
    <nav id="navbar" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <a class="navbar-brand logo-image" href="/">
                        <span>V2ray X</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Yavin</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>vue &#8211; vue基础/vue核心内容_在线工具</h1>
                    <p>
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-2">
        <img class="decoration-star" src="/assets/website/img/v2rayx/decoration-star.svg" alt="alternative">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>终于算是顺利进入vue了，确实也只有学了过后才知道，之前三过vue而不学，确实是对的，现在进来了一点都不后悔，ajax、node.js、promise、webpack、git等等确实是除了三大基础外还需要额外学的。<br /> 终于能够一窥vue的真容了，学了这么久，说实话一直都忍着，不去触碰这一条线，就想留着保持浓厚的兴趣，来看看vue到底是个什么神奇的东西，能让代码如此简单，确实，至少到我现在学的阶段，其他大的感触没有，唯一的感触就是，很多功能的实现要简便的多了，那比原生js不是简单一星半点。<br /> 这中间笔记还丢过，感觉可能typora都要让我来学两编加深下记忆吧，总是有这个bug，明明占用的存储大小还在那里，打开就是一片空白，反正已经跟typora的制作团队联系过了，看能不能后续给解决掉这个bug。</p> <p>这篇文章可谓是重量级，至少是我目前为止集格式、含金量、规模最大的！</p> </h1> <h2 id="1-vue是什么">1. Vue是什么</h2> <p>一套用于构建用户界面的渐进式（渐进式：自顶向下逐层的应用，由一个小巧的核心库，引入各式各样的vue插件）JavaScript框架。</p> <h2 id="2-特点">2. 特点</h2> <ul> <li> <p>采用组件化模式，提高代码复用率，让代码更好维护：一个.vue后缀的文件包含html、css、js全部包在一起完成一个活动版块的内容这就是组件化；代码复用率：你既然都封装好了，我直接拿来用那就是代码复用率；代码更好维护：我直接在你的基础上修改一些功能。</p> </li> <li> <p>声明式编码</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/5b0ef624781f0b44f6f1802d37bc556b.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>在了解什么是声明式编码之前先了解什么是命令式编码，我们以前要将一个数据对象渲染到页面上都是通过原生js这样一步一步往下做，像在一步一步完成别人命令一样这就是命令式代码，而我们声明式代码只需要声明一下即可。</p> </li> <li> <p>使用虚拟DOM+Diff算法，复用DOM节点</p> <p>原来我们用原生js，渲染数据通过模板字符串亦或者是模板引擎，如果这个时候又新增了几条数据上来，又要从头开始渲染然后生成一个完整的html，那除去我们新增的是不是又生成了一些以前就有的字符串（以前那些数据），所以vue的做法就是运动虚拟dom，再加上diff算法会去比较虚拟的dom如果有跟以前一样的直接复用。</p> </li> </ul> </h1> <h2 id="1安装">1.安装</h2> <p>打开vue官网安装开发版本，引入vue.js后log会有两个提示：一个是叫你要下载开发者工具，一个是提醒你在上线后不要引入这个vuejs</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/9883adc82d61e74cc78c1ca7468a84f8.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>Vue代码提示插件：vue 3 Snippets</p> <h2 id="2开发者工具">2.开发者工具</h2> <p>谷歌应用商店下载vue-devtools</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/46fc30f663ab405b3c40f50c89889683.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>注意修改vue谷歌插件</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/3ad5a5343dde59eee0804cd45cc086a4.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <h2 id="3productiontip">3.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://cn.vuejs.org/v2/api/#productionTip"  target="_blank" rel="nofollow">productionTip</a></h2> <p>也就是我们第二个提示，参照vue官网api</p> <p>这个是我们vue的全局配置下的属性，也就是vue.config的属性字面意思就是生产环境提示，修改为false。</p> <p>自此所有提示消除。</p> </h1> <h2 id="1hello小案例">1.hello小案例</h2> <p>进入这个案例前，先解决一个问题</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/cb55dd23e98605d2b2f06a19000183be.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/b357b21b7b09007602cd2eaa5fd80600.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>首先要知道我们的vscode开启live server后，他是将整个vscode文件夹放在了这个服务器下面去了，所以他回去服务器的根目录上找这个小图标，在根目录添加一个这样的图标即可</p> <p>怎么来使用vue，开端需要创建一个vue的对象实例，然后主要的是，实例里面要传入的参数：</p> <p>el ：‘’<mark>el是固定写法，后面的值通常为css的选择器</mark></p> <p>data ：｛｝<mark>data也是固定写法，后面暂时以对象进行书写，作用是向上面el也就是哪个容器传递参数</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/2fe9cb002d4c84b49d608914f7d5c558.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><mark>总结：</mark></p> <ul> <li>想让vue工作必须配置一个vue实例，并且里面的参数为一个对象</li> <li>容器（div盒子）也被称为<u>vue模板</u> 的作用一个是插入vue语法，二个是当运行js的时候看到vue这个实例，那么vue.js就回去扫描有没有这个容器，扫到后还有一个vue语法，就去看数据有没有这个键，从而完成一个转换的过程。其实这个原理有点类似于前面说过的模板引擎！</li> </ul> <h3 id="11注意事项">1.1.注意事项</h3> <ul> <li>我们的容器（vue模板）和实例之间是一一对应的关系，你写两个vue模板都以同样的class命名，实例写一个，并不会两个都渲染上，只有第一个模板有数据；你写一个模板，但是实例有两个，都对应的这个模板，分别传入了两条数据，也并不会都把数据渲染上来，只有第一个实例有数据。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/d76c8175d3df3e4dcba3a98c690bb2df.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <ul> <li> <p>真实开发中只会有一个容器和一个实例（数据这里将会进行组件化开发）</p> </li> <li> <p>在我们容器中的vue语法｛｛｝｝里的内容只能是表达式</p> <p>表达式：就是带有值的式子，如一个变量、函数、三元表达式、算术运算等</p> <p>js代码：if、for循环这些</p> <p>要区分这两个：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/23220796872b48c59d8f0ec0026b49b2.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p>修改数据可在开发者工具中修改</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/fba7f8052dca522c05a0e520458729e0.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> </ul> <h2 id="2模板语法">2.模板语法</h2> <ul> <li> <p>插值语法，即上面所用的插入进去的值</p> </li> <li> <p>指令语法：<mark>v-bind：可简写为：</mark>注意（它是专门给<u><strong>标签属性</strong></u>里面的字符串让他变为一个表示式的，就相当于有值了，是个变量了，要去实例里面找值了）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/ae1c95cc7e7cebb953a0b3000b7cc8c4.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>所以我们一般用插值语法应用标签体上面，而v-bind用于标签属性</p> </li> </ul> <h2 id="3数据绑定">3.数据绑定</h2> <p>数据绑定分为两种：</p> <ul> <li> <p>单向绑定<mark>v-bind</mark> 只会让属性受数据影响，但是数据的修改影响不了属性。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/7433f82da3423a550ed9dc8841b23f77.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p>双向绑定：<mark>v-model</mark> 值在变，同时数据data也在变</p> <p><mark>v-model：value可以直接简写为：v-model没有冒号，因为它本身就是用来收集value值的</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/0a6f24a13fba122a1112d645a6c6d90c.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> </ul> <p><mark>注意</mark>：双向绑定一般只用在<strong><u>表单类元素</u></strong>上（input、单选、复选、文本域等）</p> <h2 id="4eldata两种写法">4.el、data两种写法</h2> <p>首先要知道我们的vue实例对象上面有很多$开头的方法，这些方法都是给我们用的，但是非$开头的就是vue自己用的了我们用不了，el的第二种写法正是用到了实例对象的proto原型上的一个<mark>$mount</mark>的方法（理解性记忆，mount有挂载的意思，而我们vue本身就是把这个实例挂载到这个容器上），原来那种和这一种都可以，面对不同的情况有不同的用法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/71f2b53fde11b2812b87cf4d01d0af13.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>data的简写方法就是值为一个函数，<mark>但是函数的返回值只能为一个对象</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/47ff5bd3b201b01c59243f6cb978fc96.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>缩写为</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/4119ee0112d265995e99ef3e70736613.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><mark>注意：vue所管理的函数（比如data函数），不能写箭头函数，不然this乱了不再是vue对象实例了</mark></p> <h2 id="5mvvm模型">5.MVVM模型</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/94a151fc1e9dba67707e244ae8437ad8.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>首先是M可以看成我们的数据，V看成我们的模板，最后一个VM就是可以将我们的数据渲染到模板，将模板的value保存到数据，在中间起到一个转换的工作，这个就是VM，整个系统就为MVVM模型</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/e6887efc78307faae527bdaaddf7d98e.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><mark>所以我们一般把对象实例取名为vm,中间的一个转换的过程，就需要我们去学习vue的各种语法了</mark></p> <p><mark>总结</mark>：回顾一下我们前面所说的｛｛｝｝vue方法这里面都能写些什么的问题，前面是说的表达式吧，其实这里面能写的远不止于此，我们vm是一个实例对象，｛｛｝｝里面放的东西其实是我们vm实例对象里面的任何东西，包括我们数据里面写的name、age等都是因为他有所以我们才能用到。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/5e5ed360fbd8fa0dabeba7c1cf06674f.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>不仅如此，就连原型上的、非$开头的都可以拿到，而且不用带前缀，以为都是vm里面的，之所以要这么说，只是为了要记住，我们的模板里面的vue语法都是拿的vm实例里面的属性方法。</p> <h2 id="6数据代理">6.数据代理</h2> <ul> <li>需要用到之前学过的一个es6语法Object.defineProperty（字面意思看得出定义属性，那就是定义对象的属性的），这个方法有三个参数，<strong>第一个为对象名，第二个为对象属性名，第三个参数为一个配置对象，里面有四个值可以对这个属性做约束</strong></li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/282a4d139ebe63eaed43da6c65bfe278.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>	枚举表示是否可以被遍历</p> <p>	上面只是这个方法的普通用法，真正要用的是配置对象的两个方法</p> <p>	如果我们是这样定义的：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/fe1f92d6eb599d101dd95890ea94d875.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/d842c8a58cd1877bc07f63e83f9ea64e.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>可以看到值并不会被更改，为什么？因为我们都知道js代码的一个执行顺序加上我们时间循环的一个机制，当我们第一次定义玩number，同时跟着主栈道把data也一起定义完了，这个时候我再去修改number的值，那就只是修改number的值，并不会重新再执行一次data的重新赋值，他的修改也影响不了他。</p> <p>所以这个时候在我们的defineProperty配置对象里面就出现了两种方法</p> <p><mark>get函数（getter）当有人一访问age这个值时就会立马去调用getter</mark></p> <p><mark>set函数（setter）当有人一修改age这个值时我的value形参就会接收到这个值，从而可以拿来对我的里面的数据修改值</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/f21e426ec30e9c65e82a249b7581a0f0.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <ul> <li> <p>数据代理</p> <p>通过一个对象代理对另一个对象属性的操作（读写）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/e5f2e3a6cc2ee21f11065a84805cb05c.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/d17f6a6b0be44f6f82ae7bf81f1dd2d7.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p>vue中的数据代理</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/bcf4023ad56f1adff5215439e60f7963.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>首先我们定义的data会被vue转化成他下面的_data这个对象，其实vue做到这一步就已经够了，我们传数据的时候只需要_ data.name即可，但是有没有想过我们没传一个数据，前面都要加一个 _data是不是很麻烦，所以vue接着才做了一个数据代理的事情，在vm实例上新增了两个属性name和age，其实就是用defineproperty这个方法新增的，同时里面getter返回<em>data.name的值，setter又把值修改到他，这里就存在了一个数据代理，用了vm实例对象代理了</em> _data这个对象</p> </li> </ul> <h2 id="7事件处理">7.事件处理</h2> <h3 id="71-事件基本使用">7.1 事件基本使用</h3> <p><mark>事件的指令语法v-on:click（指令语法都是v-开头）</mark></p> <p><mark>vm实例对象属性为methods</mark> 它是时间处理函数的属性名</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/c155ea7a2f7c92971134d692e99be1d3.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>我们事件怎么来传参？前面说过指令语法会把字符串变为表达式，所以这里的字符串不再是看成字符串这么简单，是一个函数，是函数就可以给他实参</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/505f61b373b9850874858cf30e12edd9.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>事件要使用event这个内置对象的话，也需要传参进去<mark>$event</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/2e83273a581bc81d289faa97cb3f8d99.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><mark>注意：</mark></p> <ul> <li>v-on:xxx xxx为事件名这是vue的事件声明方式，<mark>可以简写为@xxx</mark></li> <li>我们的这几个事件处理函数也会变成vm实例上的函数</li> <li>这些函数也是属于<u><strong>vue所管理的函数</strong></u>所以不要使用箭头函数</li> <li><strong>如果指令语法没有传参，处理函数又有<u>一个</u>形参，这个参数默认为e内置对象</strong></li> </ul> <h3 id="72-事件修饰符">7.2 事件修饰符</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/8f30112c35aa0e8079d7c247ae6949fc.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>就是无需通过e.~~来执行一些操作，直接可以在指令语法处使用，<mark>看以下案例注意这个事件修饰符是加在哪里得</mark></p> <p>（前三个熟记）（可以像链式编程一样连写）</p> <ul> <li> <p><mark>prevent：阻止默认行为</mark></p> </li> <li> <p><mark>stop：阻止冒泡</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/ef4e2ab0edf847d20aed3d3a14fa19d9.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p><mark>once：事件只触发一次</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/691ebbc92f74e3da77ddfc9d9ae5be56.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p><mark>capture：使用捕获模式</mark></p> <p>怎么来理解，因为我们默认事件是要先经过捕获才冒泡，但是事件处理是在冒泡进行的，也就是父子都有一个打印信息，我点子，其实是先读取了父再来读取子的因为先经过捕获事件，但是我们事件处理程序是在冒泡进行，所以冒泡回去的时候才会开始打印子再打印父，这个时候如果给父添加了一个capture，那就代表着从事件捕获就开始处理程序，本身事件流就是先捕获，我点子，事件流来了，由于是捕获阶段触发事件，所以会先打印父再打印子</p> <p>正常逻辑我点div2会按照冒泡执行2 1</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/e820018988258f9020c70281e574ae30.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/7688a9656cd80a735a2329264ad462f8.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>加了capture之后</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/3f1d848783afffefad78901ff340855b.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p><mark>self：只有e.target是当前操作元素的时候才会触发（可以拿来阻止冒泡）</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/4289c01f18fdd718b4b1e58fd84110ce.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>很明显这个又会出发冒泡，但是我给父元素加了个.self事件修饰符，意思就是只有e.target是自己的时候才会触发他那个点击事件，我们知道e.target谁触发就是谁，点击div4虽然触发两次，但是两次都是div4这个元素</p> </li> <li> <p>passive：</p> <p><mark>两个扩展的知识</mark> ：我们的滚动事件有两种，一个是<mark>scroll</mark>在我们滚动滚动条的时候触发的，一个是<mark>wheel</mark>当我们滚动鼠标滚轮的时候触发</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/822abf4432d7ad4f228e7b6dd2c3678c.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>这个时候会发现，当我们鼠标滚轮一动，需要先把回调函数执行完了，才会去执行默认行为向下滚动的操作，这个时候passive就派上用场了。</p> </li> </ul> <h3 id="73-键盘事件">7.3 键盘事件</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/698096d968b93c815648dd03c3781dbd.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/69406a4fec918b9aea209f48e25c024e.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>注意用在哪里，怎么个用法</p> <ul> <li> <p>特殊按键</p> <ul> <li>tab：必须配合keydown使用，因为一按下就会切换，keyup等你抬起按键时，已经切走了，就无法实现按这个键要实现的功能</li> <li>系统修饰键如上图第三点，扩展：@keyup.ctrl.y = xxx表示只能ctrl + y才触发</li> </ul> </li> <li> <p>如果想要用的按键在定义之外，可以先通过e.key去查看这个键叫什么名字，一般就是叫键盘上的名字有些不一样，如ctrl=control，得到名字后<mark>如果是两个单词及以上也就是驼峰命名的（CapsLock）</mark>，需要将大写转为小写，同时单词之间用-分割，如：caps-lock即可正确使用该键</p> </li> </ul> <h2 id="8-计算属性">8. 计算属性</h2> <p>姓名案例：</p> <p>输入姓，输入名，展示出来并且是动态展示。</p> <ul> <li>插值语法实现：</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/0bcd2fe1fca4236d3a3655d1139b2e3b.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <ul> <li> <p>methods方法实现</p> <p>我们的vue语法是可以为一个函数的，而且只要是函数都要写在methods里面</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/285d053fa4cd85d3cc7b04c5f5e93151.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>这方法实现关键点在于，首先我们事件处理函数确实可以省略括号，但是vue语法里面不可省略，然后要知道我们的data是在vm实例里面的，而我们的vue管理的函数this又是vm实例，所以就可以拿了</p> </li> <li> <p><mark>计算属性</mark></p> <p>将<mark>已经写好的属性</mark>去加工计算形成全新的属性，需要写在<mark>computed</mark>属性里面</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/1fcfb4943973f749b692e904c04379fc.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>firstname、lastname都是我们vm的属性，而fullname也是vm的属性（所以用也是直接vue语法来用），但是他是计算属性，需要将已有属性用来操作的属性</p> <p>计算属性里面的每一个属性跟obj定义属性的方法一样需要一个getter和setter，当有人一访问到这个属性（fullname）就会调用getter，且它的返回值就是fullname的值</p> <p><u><strong>get什么时候调用？</strong></u></p> <p>computed里面的getter有缓存机制，也就是说一个vue模板里面如果多处用到了fullname那么，getter只会被调用一次。</p> <p>什么时候被调用分为两种情况：一是初次读取这个计算属性的时候，二是这个计算属性依赖数据发生变化的时候（依赖数据也就是里面的this.xxx的数据）</p> <p>所以他跟上面的methods最本质的区别就是他有缓存机制，多次使用这个值只要依赖数据没发生变化那么只会调用一次，而methods里面的函数方法，用一次调一次</p> <p><u><strong>同时这里要注意一下不要把它看的太复杂了，就是一个属性而已，vue语法调用的时候也是正常按照属性来调用，里面的函数只是对这个属性修饰，可以理解为模板引擎里面的fileterName</strong></u></p> <p><strong><u>setter</u></strong></p> <p>他同样也有setter，如果这个属性只是算来给别人读取的就不用写这个setter，如果这个计算属性还会被修改的话，就需要setter</p> <p><mark>简写</mark>：前提只读不写（没有setter）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/56b60512973539e627000757f5282788.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>这里还是个属性，只是简写了，不要在vue语法里面去像函数一样调用</p> </li> </ul> <h2 id="9监视属性">9.监视属性</h2> <p>监视是用来监测属性（一般属性、计算属性）是否发生变化</p> <p>天气案例</p> <p>首先<mark>如果事件的代码很简单一句话可以直接指令语法处</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/eaf5820d401468e22006fd3c7115db98.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <ul> <li> <p>监视方法一：通过一个全新的配置<mark>watch</mark>里面写上你要监视的属性也是一个对象，再在里面写上配置项<mark>handler</mark>函数他有两个参数，一个是改变后最新的值，一个是变化前的值；第二个配置项<mark>immediate</mark>为布尔值，表示让hanlder一开始就执行还是发生变化在执行</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/dbec2030f61d531a2aab83c7991abc0b.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/3a16c4a7356a44d0efc8c2f5ec73e23f.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p>监视方法二：通过vm实例里面的提供的方法<mark>$watch</mark></p> <p><mark>注意对象里面的属性名其本质是字符串所以这里需要传字符串</mark></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/63e9e567c3113fc8e4ca98a8d0e84075.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> <li> <p>深度监视</p> <p>Vue的watch默认不检测对象里面的值，需要配置<mark>deep</mark>在watch里面才可检测到对象是否改变</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/aaca7dc0b748861faf71a7ba6617b69d.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/b6449668f356e7a28d873bdb85ee7166.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <ul> <li> <p><mark>监视简写</mark></p> <p>跟计算属性类似，没有其他配置项，只有handler时可简写</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/bdc52246e40a04da033bbae92723d67c.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p>方法二同样可以简写，前提条件是一样的</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/5933c0e07a4196ef7d0efaf8d6575462.jpg" alt="vue - vue基础/vue核心内容_在线工具"></p> <p><mark>总结：目前vue所管理的函数（不能写箭头函数）</mark>=&gt; methods里面的、计算属性里面的getter、setter（包括简写形式）、监视属性handler包括简写</p> </li> </ul> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-69390.htm">家猫为什么不建议打疫苗针呢（家猫为什么不建议打疫苗针呢）</a></p>
                                        <p>下一个：<a href="/news/article-70044.htm">米加小镇狗粮在哪里买（米加小镇养宠物）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-40821.htm" title="宠物领养活动广告词大全（宠物领养广告文案）">宠物领养活动广告词大全（宠物领养广告文案）</a></li>
                        <li class="py-2"><a href="/news/article-43804.htm" title="Git的下载与安装详细步骤">Git的下载与安装详细步骤</a></li>
                        <li class="py-2"><a href="/news/article-51310.htm" title="宠物粮食加工厂加盟费多少钱啊 宠物粮食加工厂加盟费多少钱啊一个月">宠物粮食加工厂加盟费多少钱啊 宠物粮食加工厂加盟费多少钱啊一个月</a></li>
                        <li class="py-2"><a href="/news/article-48725.htm" title="宠物粮食行业发展前景如何知乎文章 宠物粮食行业发展前景如何知乎文章内容">宠物粮食行业发展前景如何知乎文章 宠物粮食行业发展前景如何知乎文章内容</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-9-node-share-links.htm" title="2月9日→22.2M/S|2025年最新免费节点V2ray/SSR/Clash/Shadowrocket订阅链接地址分享">2月9日→22.2M/S|2025年最新免费节点V2ray/SSR/Clash/Shadowrocket订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-15-free-node-subscribe-links.htm" title="2月15日→21.1M/S|2025年最新免费节点Shadowrocket/SSR/V2ray/Clash订阅链接地址分享">2月15日→21.1M/S|2025年最新免费节点Shadowrocket/SSR/V2ray/Clash订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-59589.htm" title="瑞派宠物医院招聘电话（瑞派宠物医院招聘信息）">瑞派宠物医院招聘电话（瑞派宠物医院招聘信息）</a></li>
                        <li class="py-2"><a href="/news/article-41813.htm" title="宠物粮食品牌大全排行榜图片 宠物粮食品牌大全排行榜图片及价格">宠物粮食品牌大全排行榜图片 宠物粮食品牌大全排行榜图片及价格</a></li>
                        <li class="py-2"><a href="/news/article-53428.htm" title="炖青鱼的做法简单又好吃(炖青鱼的做法大全)">炖青鱼的做法简单又好吃(炖青鱼的做法大全)</a></li>
                        <li class="py-2"><a href="/news/article-37369.htm" title="附近免费领狗狗（附近免费领狗狗的地方）">附近免费领狗狗（附近免费领狗狗的地方）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-2 -->
    <!-- end of details 1 -->
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    &nbsp;
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
            <div class="row">
                <div class="col-lg-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p class="p-small"><a href="/">V2ray X节点订阅官网</a> 版权所有 Powered by WordPress</p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/v2rayx/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/v2rayx/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayx/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/v2rayx/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/v2rayx/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/v2rayx/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>